CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

IF (WIN32)
ELSE ()
	# SET(CMAKE_C_COMPILER "/usr/bin/clang")
	# SET(CMAKE_Cxx_COMPILER "/usr/bin/clang++")
	# SET(CMAKE_AR "/usr/bin/llvm-ar")
	# SET(CMAKE_LINKER "/usr/bin/llvm-ld")
	# SET(CMAKE_NM "/usr/bin/llvm-nm")
	# SET(CMAKE_OBJDUMP "/usr/bin/llvm-objdump")
	# SET(CMAKE_RANLIB "/usr/bin/llvm-ranlib")
ENDIF (WIN32)

SET(ProjectName Utopia)
PROJECT(${ProjectName})

FUNCTION(SourceGroupByDir base_path file_paths prefix_source_group)
	FOREACH (file_path ${file_paths})
		STRING(REGEX REPLACE "${base_path}/(.*)" \\1 relate_path ${file_path})
		STRING(REGEX REPLACE "(.*)/.*" \\1 group_name ${relate_path})
		STRING(COMPARE EQUAL ${group_name} ${relate_path} is_no_group)
		IF (is_no_group)
			SET(group_name "\\")
		ENDIF(is_no_group)
		string(REPLACE "/"  "\\" group_name "${group_name}")
		SOURCE_GROUP("${prefix_source_group}\\${group_name}" FILES ${file_path})
	ENDFOREACH(file_path ${file_paths})
ENDFUNCTION(SourceGroupByDir)

SET(Cpp_File_Pattern "*.hpp" "*.cpp" "*.h" "*.c")

FUNCTION(FileGlobRecurse search_dir file_patterns out_files)
	FOREACH (file_pattern ${file_patterns})
		FILE(GLOB_RECURSE tmp_files "${search_dir}/${file_pattern}")
		SET(all_files ${all_files} ${tmp_files})
	ENDFOREACH(file_pattern ${file_patterns})
SET(${out_files} ${all_files} PARENT_SCOPE)
ENDFUNCTION(FileGlobRecurse)

FileGlobRecurse(${CMAKE_CURRENT_SOURCE_DIR} "${Cpp_File_Pattern}" dir_files)
SET(SourceFiles ${SourceFiles} ${dir_files})
SourceGroupByDir(${CMAKE_CURRENT_SOURCE_DIR} "${dir_files}" "")

SET(Protobuf_File_Pattern "*.h" "*.cc")
FileGlobRecurse("${CMAKE_CURRENT_SOURCE_DIR}/Logic/ShareCode/Network/Protobuf" "${Protobuf_File_Pattern}" dir_files)
SET(SourceFiles ${SourceFiles} ${dir_files})
SourceGroupByDir(${CMAKE_CURRENT_SOURCE_DIR} "${dir_files}" "")

INCLUDE_DIRECTORIES(. ./Libs/3rdpartLibs ./Libs/OwnLibs ./Libs/3rdpartLibs/Libevent/include ./Libs/3rdpartLibs/protobuf/include)
INCLUDE_DIRECTORIES(./Libs/OwnLibs/SolLuaBindUtils)
INCLUDE_DIRECTORIES(./Logic ./Logic/ShareCode ./Logic/ShareCode/Config/AutoCsvCode ./Logic/LogicModules)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/lua/include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/lua_protobuf/include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/sol)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/behaviac/include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/DebugUtils/Include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/Detour/Include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/DetourCrowd/Include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/DetourTileCache/Include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/Recast/Include)
INCLUDE_DIRECTORIES(./Libs/3rdpartLibs/recastnavigation/RecastDemo/Include)
INCLUDE_DIRECTORIES(./Libs/OwnLibs/SolLuaBindUtils)

LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Libs/3rdpartLibs/lua_protobuf/libs)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Libs/3rdpartLibs/Libevent/libs)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Libs/3rdpartLibs/protobuf/libs)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Libs/3rdpartLibs/lua/libs)
LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Libs/3rdpartLibs/behaviac/libs)

# For LRDB
SET(LRDB_Parent_Dir ${CMAKE_CURRENT_SOURCE_DIR}/../../ExternalCode)
INCLUDE_DIRECTORIES(${LRDB_Parent_Dir}/LRDB/include)
INCLUDE_DIRECTORIES(${LRDB_Parent_Dir}/LRDB/third_party/asio/asio/include)
INCLUDE_DIRECTORIES(${LRDB_Parent_Dir}/LRDB/third_party/picojson)

IF (WIN32)
	ADD_DEFINITIONS(/D NOMINMAX)
	ADD_DEFINITIONS(/MP)
	ADD_DEFINITIONS(/D _CRT_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4996 /wd4800 /D _WINSOCK_DEPRECATED_NO_WARNINGS)
	LINK_LIBRARIES(event event_core event_extra)
	LINK_LIBRARIES(libprotocd libprotobufd liblua) 
	LINK_LIBRARIES(libbehaviac) 
	LINK_LIBRARIES(pb) 
	ADD_COMPILE_OPTIONS(-std=c++11)
	ADD_DEFINITIONS(/D _WIN32_WINNT=0x0601) #LRDB define  
ELSE ()
	LINK_LIBRARIES(event event_core event_extra)
	LINK_LIBRARIES(protoc protobuf) 
	LINK_LIBRARIES(lua) 
	LINK_LIBRARIES(behaviac) 
	LINK_LIBRARIES(pthread) 
	ADD_DEFINITIONS(-DDEBUG)
	ADD_COMPILE_OPTIONS(-g -std=c++14)
ENDIF (WIN32)

ADD_EXECUTABLE(${ProjectName} ${SourceFiles})

#SET_PROPERTIES(PROPERTIES FOLDER "examples")


