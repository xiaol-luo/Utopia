// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_INCLUDED_Common_2eproto
#define PROTOBUF_INCLUDED_Common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto 

namespace protobuf_Common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Common_2eproto
namespace NetProto {
class PBVector2;
class PBVector2DefaultTypeInternal;
extern PBVector2DefaultTypeInternal _PBVector2_default_instance_;
class PBVector3;
class PBVector3DefaultTypeInternal;
extern PBVector3DefaultTypeInternal _PBVector3_default_instance_;
class TestCommon;
class TestCommonDefaultTypeInternal;
extern TestCommonDefaultTypeInternal _TestCommon_default_instance_;
}  // namespace NetProto
namespace google {
namespace protobuf {
template<> ::NetProto::PBVector2* Arena::CreateMaybeMessage<::NetProto::PBVector2>(Arena*);
template<> ::NetProto::PBVector3* Arena::CreateMaybeMessage<::NetProto::PBVector3>(Arena*);
template<> ::NetProto::TestCommon* Arena::CreateMaybeMessage<::NetProto::TestCommon>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NetProto {

// ===================================================================

class TestCommon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.TestCommon) */ {
 public:
  TestCommon();
  virtual ~TestCommon();

  TestCommon(const TestCommon& from);

  inline TestCommon& operator=(const TestCommon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestCommon(TestCommon&& from) noexcept
    : TestCommon() {
    *this = ::std::move(from);
  }

  inline TestCommon& operator=(TestCommon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCommon* internal_default_instance() {
    return reinterpret_cast<const TestCommon*>(
               &_TestCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TestCommon* other);
  void Swap(TestCommon* other);
  friend void swap(TestCommon& a, TestCommon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestCommon* New() const final {
    return CreateMaybeMessage<TestCommon>(NULL);
  }

  TestCommon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestCommon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestCommon& from);
  void MergeFrom(const TestCommon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCommon* other);
  protected:
  explicit TestCommon(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetProto.TestCommon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.PBVector3) */ {
 public:
  PBVector3();
  virtual ~PBVector3();

  PBVector3(const PBVector3& from);

  inline PBVector3& operator=(const PBVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBVector3(PBVector3&& from) noexcept
    : PBVector3() {
    *this = ::std::move(from);
  }

  inline PBVector3& operator=(PBVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBVector3* internal_default_instance() {
    return reinterpret_cast<const PBVector3*>(
               &_PBVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PBVector3* other);
  void Swap(PBVector3* other);
  friend void swap(PBVector3& a, PBVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBVector3* New() const final {
    return CreateMaybeMessage<PBVector3>(NULL);
  }

  PBVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBVector3& from);
  void MergeFrom(const PBVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBVector3* other);
  protected:
  explicit PBVector3(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:NetProto.PBVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.PBVector2) */ {
 public:
  PBVector2();
  virtual ~PBVector2();

  PBVector2(const PBVector2& from);

  inline PBVector2& operator=(const PBVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBVector2(PBVector2&& from) noexcept
    : PBVector2() {
    *this = ::std::move(from);
  }

  inline PBVector2& operator=(PBVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBVector2* internal_default_instance() {
    return reinterpret_cast<const PBVector2*>(
               &_PBVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PBVector2* other);
  void Swap(PBVector2* other);
  friend void swap(PBVector2& a, PBVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBVector2* New() const final {
    return CreateMaybeMessage<PBVector2>(NULL);
  }

  PBVector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBVector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBVector2& from);
  void MergeFrom(const PBVector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBVector2* other);
  protected:
  explicit PBVector2(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:NetProto.PBVector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestCommon

// -------------------------------------------------------------------

// PBVector3

// float x = 1;
inline void PBVector3::clear_x() {
  x_ = 0;
}
inline float PBVector3::x() const {
  // @@protoc_insertion_point(field_get:NetProto.PBVector3.x)
  return x_;
}
inline void PBVector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NetProto.PBVector3.x)
}

// float y = 2;
inline void PBVector3::clear_y() {
  y_ = 0;
}
inline float PBVector3::y() const {
  // @@protoc_insertion_point(field_get:NetProto.PBVector3.y)
  return y_;
}
inline void PBVector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NetProto.PBVector3.y)
}

// float z = 3;
inline void PBVector3::clear_z() {
  z_ = 0;
}
inline float PBVector3::z() const {
  // @@protoc_insertion_point(field_get:NetProto.PBVector3.z)
  return z_;
}
inline void PBVector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:NetProto.PBVector3.z)
}

// -------------------------------------------------------------------

// PBVector2

// float x = 1;
inline void PBVector2::clear_x() {
  x_ = 0;
}
inline float PBVector2::x() const {
  // @@protoc_insertion_point(field_get:NetProto.PBVector2.x)
  return x_;
}
inline void PBVector2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NetProto.PBVector2.x)
}

// float y = 2;
inline void PBVector2::clear_y() {
  y_ = 0;
}
inline float PBVector2::y() const {
  // @@protoc_insertion_point(field_get:NetProto.PBVector2.y)
  return y_;
}
inline void PBVector2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NetProto.PBVector2.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Common_2eproto
