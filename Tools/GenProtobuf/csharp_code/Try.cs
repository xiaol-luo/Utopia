// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: try.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from try.proto</summary>
  public static partial class TryReflection {

    #region Descriptor
    /// <summary>File descriptor for try.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl0cnkucHJvdG8SCE5ldFByb3RvIiMKB1RyeUl0ZW0SCgoCaWQYASABKAUS",
            "DAoEbmFtZRgCIAEoCSKiAgoGVHJ5TXNnEg8KB2ludF92YWwYASABKAUSDwoH",
            "c3RyX3ZhbBgCIAEoCRIiCgdtc2dfdmFsGAMgASgLMhEuTmV0UHJvdG8uVHJ5",
            "SXRlbRIjCghlbnVtX3ZhbBgEIAEoDjIRLk5ldFByb3RvLlRyeUVudW0SMwoN",
            "bmVzdF9lbnVtX3ZhbBgFIAEoDjIcLk5ldFByb3RvLlRyeU1zZy5UcnlOZXN0",
            "RW51bRIkCgltc2dfYXJyYXkYBiADKAsyES5OZXRQcm90by5UcnlJdGVtEjUK",
            "D25lc3RfZW51bV9hcnJheRgHIAMoDjIcLk5ldFByb3RvLlRyeU1zZy5UcnlO",
            "ZXN0RW51bSIbCgtUcnlOZXN0RW51bRIFCgFhEAASBQoBYhABKhcKB1RyeUVu",
            "dW0SBQoBYRAAEgUKAWIQAUID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NetProto.TryEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.TryItem), global::NetProto.TryItem.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.TryMsg), global::NetProto.TryMsg.Parser, new[]{ "IntVal", "StrVal", "MsgVal", "EnumVal", "NestEnumVal", "MsgArray", "NestEnumArray" }, null, new[]{ typeof(global::NetProto.TryMsg.Types.TryNestEnum) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TryEnum {
    [pbr::OriginalName("a")] A = 0,
    [pbr::OriginalName("b")] B = 1,
  }

  #endregion

  #region Messages
  public sealed partial class TryItem : pb::IMessage<TryItem> {
    private static readonly pb::MessageParser<TryItem> _parser = new pb::MessageParser<TryItem>(() => new TryItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TryItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryItem(TryItem other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryItem Clone() {
      return new TryItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TryItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TryItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TryItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TryMsg : pb::IMessage<TryMsg> {
    private static readonly pb::MessageParser<TryMsg> _parser = new pb::MessageParser<TryMsg>(() => new TryMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TryMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryMsg(TryMsg other) : this() {
      intVal_ = other.intVal_;
      strVal_ = other.strVal_;
      msgVal_ = other.msgVal_ != null ? other.msgVal_.Clone() : null;
      enumVal_ = other.enumVal_;
      nestEnumVal_ = other.nestEnumVal_;
      msgArray_ = other.msgArray_.Clone();
      nestEnumArray_ = other.nestEnumArray_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TryMsg Clone() {
      return new TryMsg(this);
    }

    /// <summary>Field number for the "int_val" field.</summary>
    public const int IntValFieldNumber = 1;
    private int intVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal {
      get { return intVal_; }
      set {
        intVal_ = value;
      }
    }

    /// <summary>Field number for the "str_val" field.</summary>
    public const int StrValFieldNumber = 2;
    private string strVal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrVal {
      get { return strVal_; }
      set {
        strVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_val" field.</summary>
    public const int MsgValFieldNumber = 3;
    private global::NetProto.TryItem msgVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TryItem MsgVal {
      get { return msgVal_; }
      set {
        msgVal_ = value;
      }
    }

    /// <summary>Field number for the "enum_val" field.</summary>
    public const int EnumValFieldNumber = 4;
    private global::NetProto.TryEnum enumVal_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TryEnum EnumVal {
      get { return enumVal_; }
      set {
        enumVal_ = value;
      }
    }

    /// <summary>Field number for the "nest_enum_val" field.</summary>
    public const int NestEnumValFieldNumber = 5;
    private global::NetProto.TryMsg.Types.TryNestEnum nestEnumVal_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TryMsg.Types.TryNestEnum NestEnumVal {
      get { return nestEnumVal_; }
      set {
        nestEnumVal_ = value;
      }
    }

    /// <summary>Field number for the "msg_array" field.</summary>
    public const int MsgArrayFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NetProto.TryItem> _repeated_msgArray_codec
        = pb::FieldCodec.ForMessage(50, global::NetProto.TryItem.Parser);
    private readonly pbc::RepeatedField<global::NetProto.TryItem> msgArray_ = new pbc::RepeatedField<global::NetProto.TryItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.TryItem> MsgArray {
      get { return msgArray_; }
    }

    /// <summary>Field number for the "nest_enum_array" field.</summary>
    public const int NestEnumArrayFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NetProto.TryMsg.Types.TryNestEnum> _repeated_nestEnumArray_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::NetProto.TryMsg.Types.TryNestEnum) x);
    private readonly pbc::RepeatedField<global::NetProto.TryMsg.Types.TryNestEnum> nestEnumArray_ = new pbc::RepeatedField<global::NetProto.TryMsg.Types.TryNestEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.TryMsg.Types.TryNestEnum> NestEnumArray {
      get { return nestEnumArray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TryMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TryMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal != other.IntVal) return false;
      if (StrVal != other.StrVal) return false;
      if (!object.Equals(MsgVal, other.MsgVal)) return false;
      if (EnumVal != other.EnumVal) return false;
      if (NestEnumVal != other.NestEnumVal) return false;
      if(!msgArray_.Equals(other.msgArray_)) return false;
      if(!nestEnumArray_.Equals(other.nestEnumArray_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntVal != 0) hash ^= IntVal.GetHashCode();
      if (StrVal.Length != 0) hash ^= StrVal.GetHashCode();
      if (msgVal_ != null) hash ^= MsgVal.GetHashCode();
      if (EnumVal != 0) hash ^= EnumVal.GetHashCode();
      if (NestEnumVal != 0) hash ^= NestEnumVal.GetHashCode();
      hash ^= msgArray_.GetHashCode();
      hash ^= nestEnumArray_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntVal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal);
      }
      if (StrVal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StrVal);
      }
      if (msgVal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MsgVal);
      }
      if (EnumVal != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EnumVal);
      }
      if (NestEnumVal != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) NestEnumVal);
      }
      msgArray_.WriteTo(output, _repeated_msgArray_codec);
      nestEnumArray_.WriteTo(output, _repeated_nestEnumArray_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal);
      }
      if (StrVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrVal);
      }
      if (msgVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MsgVal);
      }
      if (EnumVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumVal);
      }
      if (NestEnumVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NestEnumVal);
      }
      size += msgArray_.CalculateSize(_repeated_msgArray_codec);
      size += nestEnumArray_.CalculateSize(_repeated_nestEnumArray_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TryMsg other) {
      if (other == null) {
        return;
      }
      if (other.IntVal != 0) {
        IntVal = other.IntVal;
      }
      if (other.StrVal.Length != 0) {
        StrVal = other.StrVal;
      }
      if (other.msgVal_ != null) {
        if (msgVal_ == null) {
          msgVal_ = new global::NetProto.TryItem();
        }
        MsgVal.MergeFrom(other.MsgVal);
      }
      if (other.EnumVal != 0) {
        EnumVal = other.EnumVal;
      }
      if (other.NestEnumVal != 0) {
        NestEnumVal = other.NestEnumVal;
      }
      msgArray_.Add(other.msgArray_);
      nestEnumArray_.Add(other.nestEnumArray_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntVal = input.ReadInt32();
            break;
          }
          case 18: {
            StrVal = input.ReadString();
            break;
          }
          case 26: {
            if (msgVal_ == null) {
              msgVal_ = new global::NetProto.TryItem();
            }
            input.ReadMessage(msgVal_);
            break;
          }
          case 32: {
            enumVal_ = (global::NetProto.TryEnum) input.ReadEnum();
            break;
          }
          case 40: {
            nestEnumVal_ = (global::NetProto.TryMsg.Types.TryNestEnum) input.ReadEnum();
            break;
          }
          case 50: {
            msgArray_.AddEntriesFrom(input, _repeated_msgArray_codec);
            break;
          }
          case 58:
          case 56: {
            nestEnumArray_.AddEntriesFrom(input, _repeated_nestEnumArray_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TryMsg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TryNestEnum {
        [pbr::OriginalName("a")] A = 0,
        [pbr::OriginalName("b")] B = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
